const path = require('path');
const fs = require('fs');
const exec = require('child_process').execSync;

const config = {
  registry: '946287013054.dkr.ecr.eu-central-1.amazonaws.com',
  dev: {
    domain: 'skeleton.dev',
    ses_aws_region: 'eu-central-1',
    mailboxes: {
      default: "hostmaster,postmaster,webmaster,abuse",
      support: "info,support",
      service: "sendgrid.nonprod,sendgrid.prod",
      sender: "aws-ses"
    },
    vars: {
      TF_VAR_aws_region: 'eu-central-1',
      TF_VAR_aws_k8s_version: '1.28',
      TF_VAR_aws_k8s_nodes_min: '1',
      TF_VAR_aws_k8s_nodes_desired: '2',
      TF_VAR_aws_k8s_nodes_max: '2',
      TF_VAR_aws_k8s_nodes_size: 't3a.medium',
      TF_VAR_aws_k8s_nodes_disk: '50',
      TF_VAR_rds_db_size: 'db.t3.micro',

      TW_WEB_REPLICAS: '2',
      TW_WEB_MAX_REPLICAS: '3',
      TW_SERVICES_REPLICAS: '2',
      TW_SERVICES_MAX_REPLICAS: '3',
    },
  },
  prod: {
    domain: 'skeleton.io',
    ses_aws_region: 'us-east-2',
    mailboxes: {
      default: "hostmaster,postmaster,webmaster,abuse",
      support: "info,support",
      service: "sendgrid.nonprod,sendgrid.prod",
      sender: "aws-ses"
    },
    vars: {
      TF_VAR_aws_region: 'eu-central-1',
      TF_VAR_aws_k8s_version: '1.28',
      TF_VAR_aws_k8s_nodes_min: '1',
      TF_VAR_aws_k8s_nodes_desired: '1',
      TF_VAR_aws_k8s_nodes_max: '2',
      TF_VAR_aws_k8s_nodes_size: 't3a.medium',
      TF_VAR_aws_k8s_nodes_disk: '50',
      TF_VAR_rds_db_size: 'db.t3.micro',

      TW_WEB_REPLICAS: '1',
      TW_WEB_MAX_REPLICAS: '1',
      TW_SERVICES_REPLICAS: '1',
      TW_SERVICES_MAX_REPLICAS: '1',
    }
  }
};

const envs = {
  'dev:ci':     { domain: config.dev.domain, www: 'ci', api: 'api-ci', fluentd: 'fluent-ci', dashboard: 'dashboard-ci',
                  vars: config.dev.vars, hostP1: 'ci.', hostP2: '-ci.' },
  'dev:dev01':  { domain: config.dev.domain, www: 'dev01', api: 'api-dev01', fluentd: 'fluent-dev01', dashboard: 'dashboard-dev01',
                  vars: config.dev.vars, hostP1: 'dev01.', hostP2: '-dev01.' },
  'prod:ga':    { domain: config.prod.domain, www: '@', api: 'api', fluentd: 'fluent', dashboard: 'dashboard',
                  vars: config.prod.vars, hostP1: '', hostP2: '.' },
};

const components = [
  { id: path.join('services', 'api'),       proxy: false, ecr: true,  image: true,  migrations: true },
]

const getComponents = (env, filter = (v) => !v.proxy, log = false ) => {
  const reference = env.TLN_SKELETON_REFERENCE;
  const include = env.TLN_SKELETON_INCLUDE;
  const exclude = env.TLN_SKELETON_EXCLUDE
  //
  let c = components.filter( filter );
  if (reference) {
    // selective build
    const diff = exec(`git diff ${reference} --name-only`).toString();
    c = components.filter( v => diff.search(v.id) != -1 );
  }
  const r = c.filter( v => (!include || v.id.search(include) != -1 ) && (!exclude || v.id.search(exclude) == -1 ));
  if (log) {
    console.log('Processing components', r.map(v => v.id));
  }
  return r;
}

const parseContext = (context) => {
  let groupId = 'dev';
  let envId = '';
  const prts = context.split(':');
  if (prts.length === 1) {
    envId = context;
  } else {
    groupId = prts[0];
    envId = prts[1];
  }
  return { groupId, envId };
}

const getContext = () => {
  const cf = path.join(__dirname, '.context');
  let context = 'dev:ci';
  if (fs.existsSync(cf)) {
    const {groupId, envId} = parseContext(fs.readFileSync(cf, 'utf8').trim());
    context = [groupId, envId].join(':');
  }
  const cp = context.split(':');
  return { context, groupId: cp[0], envId: cp[1]};
}

const getTerraformOpts = (env) => {
  return `--init ${env.TLN_SKELETON_PLAN?'--plan ':''}${env.TLN_SKELETON_APPLY?'--apply ':''}${env.TLN_SKELETON_AUTO_APPROVE?'--auto-approve ':''}`;
}

module.exports = {
  options: async (tln, args) => {
    const { context } = getContext();
    args
      .prefix('TLN_SKELETON')
      .option('context',      { describe: 'Environment Id, (dev:dev01)', default: context, type: 'string' })
      .option('tenant',       { describe: 'Tenant Id', default: '', type: 'string' })
      .option('reference',    { describe: 'Reference branch, tag, SHA1 for selective build', default: null, type: 'string' })
      .option('include',      { describe: 'Regexp to include components into processing', default: '.*', type: 'string' })
      .option('exclude',      { describe: 'Regexp to exclude components from processing', default: null, type: 'string' })
      .option('plan',         { describe: 'Run Terraform plan', default: false, type: 'boolean' })
      .option('apply',        { describe: 'Run Terraform apply', default: false, type: 'boolean' })
      .option('auto-approve', { describe: 'Tun on auto approve for apply & destroy', default: false, type: 'boolean' })
      .option('dry-run',      { describe: 'Dry run application helm', default: false, type: 'boolean' })
      .option('ci',           { describe: 'Add CI specfic commands, like sshuttle', default: false, type: 'boolean' })
    ;
  },
  env: async (tln, env) => {
    const context = env.TLN_SKELETON_CONTEXT;
    const parts = context.split(':');
    const groupId = parts[0];
    const envId = parts[1];
    env.TLN_SKELETON_CLOUD_PROVIDER = 'aws';
    env.TLN_SKELETON_K8S_NAMESPACE = context.replace(':', '-');

    env.TLN_UID = config.prod.domain.split('.').reverse().join('.');
    env.TLN_VERSION = fs.readFileSync(path.join(__dirname, 'version'), 'utf8').trim();
    env.TLN_SKELETON_DOMAIN = envs[context].domain;
    env.TLN_SKELETON_DOMAIN_WWW = envs[context].www;
    env.TLN_SKELETON_DOMAIN_API = envs[context].api;
    env.TLN_SKELETON_DOMAIN_DASHBOARD = envs[context].dashboard;
    env.TLN_SKELETON_HOSTP1 = envs[context].hostP1;
    env.TLN_SKELETON_HOSTP2 = envs[context].hostP2;

    env.TLN_DOCKER_REGISTRY = config.registry;
    env.TLN_DOCKER_REGISTRY_PREFIX = env.TLN_UID;
    env.KUBECONFIG = path.join(__dirname, 'platform', 'env', 'aws', 'managed', `.kube.config.${envId}`);

    env.TF_VAR_org_id = 'codestaff';
    env.TF_VAR_project_id = 'talenttoolbox';
    env.TF_VAR_group_id = groupId;
    env.TF_VAR_env_id = envId;
    env.TF_VAR_tenant_id = env.TLN_SKELETON_TENANT;

    env.TF_VAR_domain_name = envs[context].domain;
    env.TF_VAR_domain_www = env.TLN_SKELETON_DOMAIN_WWW;
    env.TF_VAR_domain_api = env.TLN_SKELETON_DOMAIN_API;
    env.TF_VAR_domain_dashboard = env.TLN_SKELETON_DOMAIN_DASHBOARD;
    env.TF_VAR_mail_recipient = `${envs[context].domain}@codestaff.net`;
    env.TF_VAR_ses_aws_region = config[groupId].ses_aws_region;
    env.TF_VAR_ses_default_mailboxes = config[groupId].mailboxes.default;
    env.TF_VAR_ses_support_mailboxes = config[groupId].mailboxes.support;
    env.TF_VAR_ses_service_mailboxes = config[groupId].mailboxes.service;
    env.TF_VAR_ses_mail_sender = config[groupId].mailboxes.sender;
    env.TF_VAR_ecr_names = getComponents(env, (v) => v.ecr).map(item => {
      const r = [];
      const prefix = envs['prod:ga'].domain.split('.').reverse().join('.');
      const id = item.id.replace(/\//g, '.');
      r.push([prefix, id].join('.'));
      if (item.migrations) {
        r.push([prefix, `${id}-migrations`].join('.'));
      }
      return r;
    }).join(',');
    //console.log(env.TF_VAR_ecr_names);

    // Extract db, user, passsword from env vars and prepare input for Terraform
    const databases = [
//      'TTB_SERVICES_API_DB_URL',
    ].map( v => {
      const conn = env[v];
      const dbc = conn.match(/postgres:\/\/(.*?):(.*?)\@/);
      const dbu = dbc[1].split('-');
      const dbp = dbc[2];
      return `"${dbu[0]}" = { owner = "${dbu[1]}", password = "${dbp}" }`;
    }).join(', ');

    env.TF_VAR_databases = `{ ${databases} }`;
    //console.log(env.TF_VAR_databases);

    Object.keys(envs[context].vars).forEach( v => env[v] = envs[context].vars[v] );
  },
  dotenvs: async (tln) => {
    const { context, groupId, envId } = getContext();
    return [
      '.env',
      path.join('secrets', `.env.${groupId}`),
      path.join('secrets', `.env.${groupId}.${envId}`)
    ];
  },
  inherits: async (tln) => [],
  depends: async (tln) => ['docker-compose-2.23.0'],
  steps: async (tln) => 
    [
      ['init',      'init:link',  ''],
      ['format',    'format',     ''],
      ['unit-test', 'unit-test',  ''],
      ['spec-test', 'spec-test',  ''],
      ['build',     'build',      ''],
      ['package',   'package',    '&& docker builder prune -f', (v) => !v.proxy && v.image],
      ['publish',   'publish',    '', (v) => !v.proxy && v.image],
    ].map( v => 
      ({
        id: `${v[0]}-all`,
        builder: async (tln, script) => {
          script.set(getComponents(script.env, v[3], true).map( c => `tln ${v[1]} ${c.id} ${v[2]}`));
        }
      })
    ).concat([
    { id: 'configure-ci', builder: async (tln, script) => {
        const dt = [
//          ['forge'],
//          ['platform', 'env'],
//          ['platform', 'env', 'aws'],
          ['services', 'api'],
//          ['services', 'auth'],
//          ['services', 'bot'],
//          ['services', 'user'],
        ].map( v => `touch ${(v.concat(['.env'])).join(path.sep)}`);
        script.set(dt.concat([
          `npm install -g @forge/cli@7.0.0`,
        ]));
      }
    },
    { id: 'prereq', builder: async (tln, script) => {
        script.set(
          components.filter(c => !c.proxy).map(c => `tln install ${c.id} --depends`).concat([
//          `tln install ${path.join('platform', 'env', script.env.TLN_SKELETON_CLOUD_PROVIDER)} --depends`,
//          `tln install ${path.join('platform', 'app')} --depends`,
//          `tln install ${path.join('platform', 'sendgrid')} --depends`,
//          `tln login forge`,
//          `tln exec platform/env/aws -c 'aws ecr get-login-password | docker login --username AWS --password-stdin ${config.registry}'`
        ]));
      }
    },
    { id: 'configure-provider', builder: async (tln, script) => {
/*
        const provider = path.join('platform', 'env', script.env.TLN_SKELETON_CLOUD_PROVIDER);
        script.set([
          `tln construct ${provider} -- --backend cloud ${getTerraformOpts(script.env)}--layers provider --state project,provider`
        ]);
*/
    }},
    { id: 'configure-group', builder: async (tln, script) => {
/*
        const provider = path.join('platform', 'env', script.env.TLN_SKELETON_CLOUD_PROVIDER);
        script.set([
          `tln construct ${provider} -- --backend cloud ${getTerraformOpts(script.env)}--layers group --state project,provider,group`
        ]);
*/
    }},
    { id: 'construct-env', builder: async (tln, script) => {
/*
        const provider = path.join('platform', 'env', script.env.TLN_SKELETON_CLOUD_PROVIDER);
        const cert_id = script.env.TTB_DOMAIN_CERT_ID;
        script.set([
          `tln construct ${provider} -- --backend cloud ${getTerraformOpts(script.env)}`,
//          `tln nginx-ingress-install@k8s ${provider} -- --ver 4.8.3 --provider aws --cert-id ${cert_id} --values managed/nginx.yaml`,
//          `tln metrics-server-install@k8s ${provider} -- --ver 3.11.0`,
        ]);
*/
    }},
    { id: 'verify-env', builder: async (tln, script) => {
/*
        const provider = path.join('platform', 'env', script.env.TLN_SKELETON_CLOUD_PROVIDER);
        script.set([
          `tln metrics-server-status@k8s ${provider}`,
          `tln nginx-ingress-status@k8s ${provider}`,
        ]);
*/
    }},
    { id: 'construct-app', builder: async (tln, script) => {
/*
        const context = script.env.TLN_SKELETON_CONTEXT;
        const provider = path.join('platform', 'env', script.env.TLN_SKELETON_CLOUD_PROVIDER);
        script.set([
          `tln construct ${provider} -- --backend cloud ${getTerraformOpts(script.env)}--layers app`
        ]);
*/
    }},
    { id: 'connect', builder: async (tln, script) => {
/*
        const daemon = script.env.TLN_SKELETON_CI ? ' --daemon' : '';
        script.set([
          `tln sshuttle platform/env/aws --${daemon} --bastion $(tln get-bastion platform/env/aws)`
        ]);
*/
    }},
    { id: 'deploy-app', builder: async (tln, script) => {
/*
        script.set([`tln deploy platform/app`]);
*/
    }},
    { id: 'e2e', builder: async (tln, script) => {
/*
        script.set([``]);
*/
    }},
    { id: 'construct-tenant', builder: async (tln, script) => {
/*
        const context = script.env.TLN_SKELETON_CONTEXT;
        const provider = path.join('platform', 'env', script.env.TLN_SKELETON_CLOUD_PROVIDER);
        const dr = script.env.TLN_SKELETON_DRY_RUN?' --dry-run':'';
        script.set([
          `tln construct ${provider} -- --backend cloud ${getTerraformOpts(script.env)}--layers tenant --state project,provider,group,env,tenant`,
          `tln deploy platform/tenant -- --tenant ${script.env.TLN_SKELETON_TENANT}${dr}`
        ]);
*/
    }},
    { id: 'deconstruct-tenant', builder: async (tln, script) => {
/*
        const context = script.env.TLN_SKELETON_CONTEXT;
        const provider = path.join('platform', 'env', script.env.TLN_SKELETON_CLOUD_PROVIDER);
        const dr = script.env.TLN_SKELETON_DRY_RUN?' --dry-run':'';
        script.set([
          `tln undeploy platform/tenant -- --tenant ${script.env.TLN_SKELETON_TENANT}${dr}`,
          `tln deconstruct ${provider} -- --backend cloud ${getTerraformOpts(script.env)}--layers tenant --state project,provider,group,env,tenant`
        ]);
*/
    }},
    { id: 'undeploy-app', builder: async (tln, script) => {
/*
        script.set([`tln undeploy platform/app`]);
*/
    }},
    { id: 'deconstruct-app', builder: async (tln, script) => {
/*
        const provider = path.join('platform', 'env', script.env.TLN_SKELETON_CLOUD_PROVIDER);
        script.set([
          `export TF_VAR_ingress_ip=$(tln nginx-ingress-ip@k8s ${provider})`,
          `tln deconstruct ${provider} -- --backend cloud ${getTerraformOpts(script.env)}--layers app`,
        ]);
*/
    }},
    { id: 'deconstruct-env', builder: async (tln, script) => {
/*
        const provider = path.join('platform', 'env', script.env.TLN_SKELETON_CLOUD_PROVIDER);
        script.set([
          `tln metrics-server-uninstall@k8s ${provider}`,
          `tln nginx-ingress-uninstall@k8s ${provider}`,
          `tln deconstruct ${provider} -- --backend cloud ${getTerraformOpts(script.env)}`
        ]);
*/
    }},
    { id: 'deconfigure-group', builder: async (tln, script) => {
/*
        const provider = path.join('platform', 'env', script.env.TLN_SKELETON_CLOUD_PROVIDER);
        script.set([
          `tln deconstruct ${provider} -- --backend cloud ${getTerraformOpts(script.env)}--layers group --state project,provider,group`
        ]);
*/
    }},
    { id: 'deconfigure-provider', builder: async (tln, script) => {
/*
        const provider = path.join('platform', 'env', script.env.TLN_SKELETON_CLOUD_PROVIDER);
        script.set([
          `tln deconstruct ${provider} -- --backend cloud ${getTerraformOpts(script.env)}--layers provider --state project,provider`
        ]);
*/
    }},
  ]),
  components: async (tln) => []
}